# -*- coding: utf-8 -*-
"""Candidate Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PbL_3Vwt9xzRtD5lg4Uck7cUAh0V-cL9

#Candidate Recommendation

## Import Libraries
"""

# from google.colab import drive
# drive.mount("/content/drive")

import os
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""##Get Dataset"""

file_path = "./"
file_name = "Data Recommendation Candidate.xlsx"
filePath = os.path.join(file_path, file_name)
dfCandidate = pd.read_excel(filePath)

# Define NewHeader
new_column_names = {
    'NAMA': 'Name',
    'STATUS': 'Marital_Status',
    'PENDIDIKAN':
    'Education_Level',
    'UMUR': 'Age',
    'KELAMIN': 'Gender',
    'STUDY MAJOR':
    'Study_Major',
    'EXPERIENCE': 'Experience',
    'LAST EXPERIENCE POSITION': 'Last_Position'
    }

dfCandidate = dfCandidate.rename(columns=new_column_names)

dropped_column = ['No', 'LOKASI', 'UNIT', 'LEVEL JABATAN', 'JABATAN', 'DIVISI']

dfCandidate.drop(dropped_column, axis=1, inplace=True)

# Define encoding dictionaries
encod_1 = {'SD': 0, 'SMP': 1, 'SMA': 2, 'SLTA': 2, 'STM': 2, 'SMK': 2, 'D1': 3, 'D2': 4, 'D3': 5, 'D4': 6, 'S1': 6, 'S2': 7, 'S3': 8}
encod_2 = {'Free': 0, 'Pria': 1, 'Wanita': 2}
encod_3 = {'Single': 0, 'Menikah': 1, 'Duda': 2, 'Janda': 2}
# encod_4 = {'< 6 bulan': 0, '< 1 tahun': 1, '1-2 tahun': 2, '2-4 tahun': 3, '> 4 tahun': 4}
encod_4 = {'< 6 bulan': 0, '< 1 tahun': 1, '1-2 tahun': 2, '2-4 tahun': 3, '> 4 tahun': 4}

# Apply encoding
dfCandidate['Education_Level_en'] = dfCandidate['Education_Level'].map(encod_1)
dfCandidate['Gender_en'] = dfCandidate['Gender'].map(encod_2)
dfCandidate['Marital_Status_en'] = dfCandidate['Marital_Status'].map(encod_3)
dfCandidate['Experience_en'] = dfCandidate['Experience'].map(encod_4)

dfCandidate.head()

"""##Input Encoder Functions"""

def encodeGender(gender):
  encode = {'Free': 0, 'Pria': 1, 'Wanita': 2}
  if isinstance(gender, str):
    value = encode.get(gender.title(), -1)
  else:
    value = -1

  return value

def encodeStatus(status):
  encode = {'free': 3, 'single': 0, 'jomblo': 0, 'menikah': 1, 'married': 1, 'duda/janda': 2, 'janda/duda': 2, 'duda': 2, 'janda': 2}
  if isinstance(status, str):
    value = encode.get(status.lower(), -1)
  else:
    value = -1

  return value

def encodeEducation(EduLvl):
  encode = {'SD': 0, 'SMP': 1, 'SMA': 2, 'SLTA': 2, 'STM': 2, 'SMK': 2, 'D1': 3, 'D2': 4, 'D3': 5, 'D4': 6, 'S1': 6, 'S1/D4': 6, 'D4/S1': 6, 'S2': 7, 'S3': 8}
  if isinstance(EduLvl, str):
    value = encode.get(EduLvl.upper(), -1)
  else:
    value = -1

  return value

def encodeExperience(exp):
  encode = {'< 6 bulan': 0, '< 1 tahun': 1, '1-2 tahun': 2, '2-4 tahun': 3, '> 4 tahun': 4}
  if isinstance(exp, (int, float)):
    if exp < 0.5:
      # print("exp < 0.5")
      value = 0
    elif exp < 1:
      # print("exp < 1")
      value = 1
    elif exp < 2:
      # print("exp < 2")
      value = 2
    elif exp < 4:
      # print("exp < 3")
      value = 3
    else:
      # print("exp < 4")
      value = 4
  else:
    value = -1

  return value

"""##Candidate Dummy"""

# Sample candidate data (you can replace this with your actual candidate data)
candidates_data = [
    {"Name": "Candidate 1", "Age": 30, "Gender": "Male", "Marital Status": "Single", "Education Level": "Bachelor's", "Experience": 5, "Study Major": "Computer Science", "Last Position": "Software Engineer"},
    {"Name": "Candidate 2", "Age": 28, "Gender": "Female", "Marital Status": "Married", "Education Level": "Master's", "Experience": 7, "Study Major": "Electrical Engineering", "Last Position": "Data Scientist"},
    {"Name": "Candidate 3", "Age": 35, "Gender": "Male", "Marital Status": "Married", "Education Level": "PhD", "Experience": 10, "Study Major": "Computer Science", "Last Position": "Machine Learning Engineer"},
    # Add more candidates as needed
]

"""##Candidate Recommendation"""

# Function to compute cosine similarity between two candidate vectors
def compute_similarity(candidate1, candidate2, vectorizer):
    # Data target / Recommendation Input
    text1 = " ".join([candidate1["Study Major"], candidate1["Last Position"]])
    vector1 = np.array([candidate1["Age"], candidate1["Experience"], candidate1["Marital Status"], candidate1["Gender"], candidate1["Education Level"]])  # Add more parameters as needed

    # Data from dataset
    text2 = " ".join([candidate2["Study_Major"], candidate2["Last_Position"]])
    vector2 = np.array([candidate2["Age"], candidate2["Experience_en"], candidate2["Marital_Status_en"], candidate2["Gender_en"], candidate2["Education_Level_en"]])  # Add more parameters as needed

    # Compute TF-IDF vectors for text features
    text_vectors = vectorizer.transform([text1, text2]).toarray()

    # Concatenate numeric and text features
    vector1 = np.concatenate([vector1, text_vectors[0]])
    vector2 = np.concatenate([vector2, text_vectors[1]])

    return cosine_similarity([vector1], [vector2])[0][0]

# Function to recommend candidates based on similarity to a given candidate
def recommend_candidates(target_candidate, candidates_data, vectorizer):
    similarities = []
    for index, candidate in candidates_data.iterrows():
        # if candidate != target_candidate:
            similarity = compute_similarity(target_candidate, candidate, vectorizer)
            similarities.append((
                (similarity * 100),
                candidate["Name"],
                candidate["Gender"],
                candidate["Age"],
                candidate["Marital_Status"],
                candidate["Education_Level"],
                candidate["Experience"],
                candidate["Study_Major"],
                candidate["Last_Position"],
                ))
    similarities.sort(key=lambda x: x[0], reverse=True)
    return similarities

# Preprocess candidates_data and target_candidate
text_data = [" ".join([data["Study_Major"], data["Last_Position"]]) for index, data in dfCandidate.iterrows()]
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(text_data)

# Example usage:
# gender = str(input("Gender: "))
# age = int(input("Age: "))
# status = str(input("Marital Status: "))
# education = str(input("Education Level: "))
# exp = int(input("Experience: "))
# major = str(input("Study Major: "))
# lastPos = str(input("Last Position: "))

gender = "wanita"
age = 27
status = "free"
education = "d3"
exp = 3
major = "psikologi"
lastPos = "trainer"

target_candidate = {
    "Gender": encodeGender(gender),
    "Age": age,
    "Marital Status": encodeStatus(status),
    "Education Level": encodeEducation(education),
    "Experience": encodeExperience(exp),
    "Study Major": major,
    "Last Position": lastPos}
recommended_candidates = recommend_candidates(target_candidate, dfCandidate, vectorizer)

print("Gender:", gender)
print("Age:", age)
print("Marital Status:", status)
print("Education Level:", education)
print("Work Experience (tahun):", exp)
print("Study Major:", major)
print("Last Position:", lastPos)
print("\nRecommended candidates:")
dfResults = pd.DataFrame(recommended_candidates, columns=["Similarity (%)", "Name", "Gender", "Age", "Marital Status", "Education Level", "Work Experience", "Study Major", "Last Position"])
print(dfResults.head(10))